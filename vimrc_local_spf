" toggling menu for GVIM
map <silent> <C-F2> :if &guioptions =~# 'T' <Bar>
			\set guioptions-=T <Bar>
			\set guioptions-=m <Bar>
			\else <Bar>
			\set guioptions+=T <Bar>
			\set guioptions+=m <Bar>
			\endif<CR>

" configure locale
" UTF-8, euc-kr Korean document open easliy
if v:lang =~ "^ko"
    set encoding=utf-8
    set fileencodings=utf-8,cp949
    set guifontset=-*-*-medium-r-normal--16-*-*-*-*-*-*-*
    set guifont=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10
    set guifontwide=Andale_Mono:h10,Menlo:h10,Consolas:h10,Courier_New:h10;cDEFAULT

    " Windows platform language messages
    if WINDOWS()
        language messages en_US
    endif
endif

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
    set encoding=utf-8
    set fileencodings=utf-8,cp949
endif

" if you press wrong command, display splash the screen instead of ringing the
" bell (visualbell)
set visualbell

" Do not display scroll bar.
if has("gui_running")
    set go-=l
    set go-=L
    set go-=r
    set go-=R
    set go-=b
endif

" Configure method is changed.
set go-=m

" Do not display Tool bar.
set go-=T

" Do not pop the dialog 'simple selection'
set go+=c

" Display the current editing file name 
set title

" when it is the startup, it makes the whole screen. 
if has("win32")
    au GUIEnter * simalt ~x
endif

" file name is not used shell shash /
set noshellslash

" Thess fuctions can use if you have the HOME directory.
""let s:home_dir = $HOME_KID

" Word spell checker disable
set nospell

" Linux platform colorscheme
if LINUX()
    colorscheme desertEx
    set mouse=
endif

" Unmap '<leader>/' because of '<leader>/' key use vim-mark plugins
nunmap <silent> <leader>/

"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" Create window splits easier. The default way is Ctrl-w,v and Ctrl-w,s.
" I remap this to vv and ss
nnoremap <silent> vv <C-w>v
nnoremap <silent> ss <C-w>s

if WINDOWS()
    " Mouse forward,backward key use for tag search
    nnoremap <MiddleMouse> :ta <C-R>=expand("<cword>")<CR><CR>1<CR><CR>
    map <X1Mouse> <C-O>
    map <X2Mouse> <C-I>
    nmap <C-X1Mouse> :tprevious<CR>
    nmap <C-X2Mouse> :tnext<CR>
    nmap <2-LeftMouse> :pop<CR>

    " Create tab window like working screen/tmux.
    nmap <C-A><C-A> :tabp<CR>
    nmap <C-A>c     :tabnew<CR>
    nmap <C-A>d     :tabc<CR>

    " moving aroung in command mode
     cnoremap <c-h> <left>
     cnoremap <c-j> <down>
     cnoremap <c-k> <up>
     cnoremap <c-l> <right>
     cnoremap ^     <home>
     cnoremap $     <end>
endif

" Mouse is not used.
set mouse=

" Crontab error work arround
au FileType crontab setlocal bkc=yes

" Use My Local settings {
    for fpath in split(globpath('~/.vi_config/setting', '*.vim'), '\n')
      exe 'source' fpath
    endfor
" }

" Linux Kernel configuration checker {
    for fpath in split(globpath('~/.vi_config/plugin', '*.vim'), '\n')
      exe 'source' fpath
    endfor
" }
"

" Highlight TODO, FIXME, NOTE, etc.
if has("autocmd")
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\)')
    autocmd Syntax * call matchadd('ErrorMsg', '\W\zs\(ERR\)')
endif

" IAMROOT comments
map ,c <ESC>o// ARM10C <C-R>=strftime("%Y%m%d")<CR><ESC>
map ,k <ESC>o// KID <C-R>=strftime("%Y%m%d")<CR><ESC>
map ,p <ESC>o// PRE-KID <C-R>=strftime("%Y%m%d")<CR><ESC>
map ,e <ESC>o// STUDY-KID <C-R>=strftime("%Y%m%d")<CR><ESC>

let g:pydiction_location = $HOME."/.vim/bundle/pydiction/complete-dict"

" Coding line range for linux.
set colorcolumn=80

" Jedi is by default automatically initialized. If you don't want that I
" suggest you disable the auto-initialization in your .vimrc:
let g:jedi#auto_initialization = 1

" There are also some VIM options (like completeopt and key defaults) which are
" automatically initialized, but you can skip this:
let g:jedi#auto_vim_configuration = 1

" You can make jedi-vim use tabs when going to a definition etc:
let g:jedi#use_tabs_not_buffers = 1

" If you are a person who likes to use VIM-splits, you might want to put this
" let g:jedi#use_splits_not_buffers = "left"

" Jedi automatically starts the completion, if you type a dot, e.g. str.,
" if you don't want this:
" let g:jedi#popup_on_dot = 0

 " Jedi selects the first line of the completion menu: for a better typing-flow
 " and usually saves one keypress.
let g:jedi#popup_select_first = 0

" Jedi displays function call signatures in insert mode in real-time,
" highlighting the current argument. The call signatures can be displayed as a
" pop-up in the buffer (set to 1, the default), which has the advantage of
" being easier to refer to, or in Vim's command line aligned with the function
" call (set to 2), which can improve the integrity of Vim's undo history.
let g:jedi#show_call_signatures = "1"

" Here are a few more defaults for actions, read the docs (:help jedi-vim)
"to get more information. If you set them to "", they are not assigned.

let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

" Finally, if you don't want completion, but all the other features, use:
" let g:jedi#completions_enabled = 0

let g:UltiSnipsExpandTrigger="<S-u>"
let g:UltiSnipsJumpForwardTrigger="<C-j>"
let g:UltiSnipsJumpBackwardTrigger="<C-l>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

let g:UltiSnipsUsePythonVersion=3

set clipboard=unnamed
set cursorline cursorcolumn
